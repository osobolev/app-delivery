subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'com.github.osobolev.app-delivery'
    version = '2.0'

    targetCompatibility = '1.5'
                             
    compileJava.options.encoding = 'windows-1251'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    jar.manifest.attributes('Implementation-Version': version)
}

def sqlg = 'com.github.osobolev.sqlg2:sqlg2-runtime:4.0'
def jetty = 'org.eclipse.jetty.aggregate:jetty-all-server:8.1.17.v20150415'
def servlet = 'javax.servlet:javax.servlet-api:3.0.1'

def buildSource(projects) {
    def sd = ['src']
    projects.each { 
        sd.add("$rootProject.projectDir/$it/src")
    }
    sd
}

project(':apploader-common') {
    sourceSets.main.java.srcDirs = buildSource([])
}

project(':apploader-client') {
    sourceSets.main.java.srcDirs = buildSource(['apploader/common'])
}

project(':apploader') {
    sourceSets.main.java.srcDirs = buildSource(['apploader/common', 'apploader/client'])

    jar.manifest.attributes('Main-Class': 'apploader.AppLoader')
}

project(':server-core') {
    sourceSets.main.java.srcDirs = buildSource([])
    
    dependencies {
        compile sqlg
    }
}

project(':server-service') {
    sourceSets.main.java.srcDirs = buildSource(['apploader/common', 'server/core', 'server/install', 'server/http', 'server/jetty'])

    repositories {
        flatDir {
            dirs 'lib'
        }
    }

    dependencies {
        compile name: 'WinRun4J'
        compile sqlg
        compile servlet
        compile jetty
    }
}

project(':server-war') {
    sourceSets.main.java.srcDirs = buildSource(['apploader/common', 'server/core', 'server/install', 'server/http'])
    
    dependencies {
        compile sqlg
        compileOnly servlet
    }
}

project(':server-desktop') {
    sourceSets.main.java.srcDirs = buildSource(['apploader/common', 'server/core', 'server/install', 'server/http', 'server/jetty'])
    
    dependencies {
        compile sqlg
        compile servlet
        compile jetty
    }
}

project(':') {

    task build(type: Copy, dependsOn: subprojects.jar) {
        from subprojects.jar
        into 'lib'
        rename('apploader-[0-9.]*.jar', 'apploader.jar')
    }

    task install(dependsOn: build) {
    }

    task clean(type: Delete) {
        delete 'lib'
    }
}
