def dest = "$rootDir/distr"
def myVersion = "6.1"
def sqlgVersion = "2.3"
def h2 = "com.h2database:h2:2.1.214"

subprojects {
    apply(plugin: "java-library")

    group = "io.github.osobolev.app-delivery.sample"
    version = myVersion

    sourceCompatibility = "8"

    compileJava.options.encoding = "UTF-8"

    sourceSets.main.java.srcDirs = ["src"]

    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations {
        webapploader
        webdistr
        webfiles
    }

    dependencies {
        webfiles("io.github.osobolev.app-delivery:server-files:$myVersion")
        webapploader("io.github.osobolev.app-delivery:apploader:$myVersion")
        webdistr(project(":sample_client"))
    }

    ext.doCreateList = { dir ->
        def list = ["corejar=apploader.jar"]
        configurations.webdistr.each {
            list.add("jar=distr/${it.name}")
        }
        list.add("mainClass=sample.Client")
        def file = new File(dir, "sample_jars.list")
        file.parentFile.mkdirs()
        def eoln = "\n"
        file.setText(list.join(eoln) + eoln, "UTF-8")
    }
}

project(":sample_dto") {

    configurations {
        sqlg
    }

    dependencies {
        api("io.github.osobolev.sqlg3:sqlg3-core:$sqlgVersion")

        sqlg("io.github.osobolev.sqlg3:sqlg3-preprocess-ant:$sqlgVersion")
        sqlg(h2)
    }

    task preprocess {
        doLast {
            ant.taskdef(name: "sqlg", classname: "sqlg3.preprocess.ant.Preprocess", classpath: configurations.sqlg.asPath)
            ant.sqlg(classpath: configurations.sqlg.asPath,
                     driverClass: "org.h2.Driver",
                     url: "jdbc:h2:mem:", user: "", password: "",
                     srcRoot: "../sample_db/src", destRoot: "src",
                     encoding: compileJava.options.encoding) {
            }
        }
    }
    compileJava.dependsOn(preprocess)
}

project(":sample_db") {
    dependencies {
        api("io.github.osobolev.sqlg3:sqlg3-runtime:$sqlgVersion")
        api(project(":sample_dto"))
        runtimeOnly(h2)
    }
}

project(":sample_client") {
    dependencies {
        compileOnly("io.github.osobolev.app-delivery:apploader-client:$myVersion")
        implementation("io.github.osobolev.sqlg3:sqlg3-remote-client:$sqlgVersion")
        implementation(project(":sample_dto"))
    }
}

project(":sample_server") {
    dependencies {
        api("io.github.osobolev.sqlg3:sqlg3-remote-server:$sqlgVersion")
        api("io.github.osobolev.app-delivery:server-core:$myVersion")
        runtimeOnly(project(":sample_db"))
    }
}

project(":sample_server_jar") {
    
    dependencies {
        implementation(project(":sample_server"))
        implementation("io.github.osobolev.app-delivery:server-jetty:$myVersion")
    }

    jar.manifest.attributes(
        "Class-Path": configurations.runtimeClasspath.collect { it.name }.sort().join(" "),
        "Main-Class": "sample.ConsoleServer"
    )

    task clientDistr(type: Copy) {
        from(configurations.webdistr)
        into("$dest/root/distr")
    }

    task clientFiles(type: Copy) {
        from(zipTree(configurations.webfiles.find({true}))) {
            exclude("META-INF/**")
        }
        from(configurations.webapploader) {
            rename("apploader-.*\\.jar", "apploader.jar")
        }
        from("$rootDir/sample_war/webapp") {
            exclude("WEB-INF/**")
        }
        into("$dest/root")
    }

    task clientList {
        doLast {
            doCreateList(file("$dest/root"))
        }
    }

    task distr(type: Copy, dependsOn: [build, clientDistr, clientFiles, clientList]) {
        from(configurations.runtimeClasspath)
        from(jar)
        into("$dest")
    }
}

project(":sample_war") {
    
    apply(plugin: "war")

    dependencies {
        implementation(project(":sample_server"))
        implementation("io.github.osobolev.app-delivery:server-war:$myVersion")
    }

    task warList {
        doLast {
            doCreateList(file("build/list"))
        }
    }
    war.dependsOn(warList)

    war {
        archiveFileName = "sample_app.war"
        webAppDirName = "webapp"

        from(configurations.webdistr) {
            into("distr")
        }
        from(configurations.webapploader) {
            rename("apploader-.*\\.jar", "apploader.jar")
        }
        from("build/list")
        from(zipTree(configurations.webfiles.find({true})))
    }
}
